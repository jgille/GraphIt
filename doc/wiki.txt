About

GraphIt is an easy to use, fast, RAM only (or mostly) property graph
database.

Nodes as well as edges can have arbitrary properties associated with them.
Edges are directed, i.e. they have a start node and an end node. They are also  weighted
with a floating point value. Optionally, outgoing and incoming edges can be kept
sorted on edge weight, which might come in handy if you're using GraphIt for something
like a recommendation engine. A GraphIt graph can consist of nodes and edges of different types,
e.g. you can have both User and Item nodes in the same graph and distinguish between them.

GraphIt implements the Blueprints interfaces
(https://github.com/tinkerpop/blueprints/wiki/), thereby supporting
advanced ad-hoc traversals using Gremlin
(https://github.com/tinkerpop/gremlin/wiki).

When to use GraphIt

It's probably easier to start off by describing when NOT to use GraphIt.
In short, GraphIt should not be used when you value the data you put into it.
GraphIt does not persist updates to disk, it is not transactional, and updates are
neither isolated nor atomic. If you need this stuff, and in most cases you probably do,
use a proper graph database, like Neo4j for instance.

That being said, there are use cases where GraphIt might come in handy. It was originally created
to be used in a recommendation engine, storing weighted item to item relations (edges) representing
recommended items for an item. The graph is computed from a number of master data sets
(transaction history etc), which means it can be recreated if it were to be lost or corrupted.
For this use case low latency and high throughput are more important than durablity and consistency,
and GraphIt is likely to be a good choice.


Optional persistance

If so configured, a GraphIt graph will be written to disk in json format on shutdown, and restored from disk on init.
Please see the javadoc for org.graphit.graph.service.PropertyGraphImpl for more info on this.

Pluggable repositories

A GraphIt graph used a collection of repositories to store it's data. There is one repo containing
node primitives (node ids and indexex), one containing edge primitives (edge id, edge weight and start and end node index),
one containing node properties and one containing edge properties. The default implementations stores all data in RAM
only, but you are free to write your own repos using whichever backend storage you wish.

Please see the javadoc for org.graphit.graph.service.PropertyGraphImpl for more info on this.


Tinkerpop Blueprints

GraphIt implements the Blueprints interfaces, thereby supporting
advanced ad-hoc traversals using Gremlin,
making it possible to interact with the graph via a REST interface,
providing a graph algorithms package etc.

Examples
